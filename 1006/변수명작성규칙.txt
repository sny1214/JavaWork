변수명 작성규칙
문법(sytax)
  1. 대소문자를 구분하고 길이제한이 없다.
  2. 예약어는 사용할 수 없다.
  3. 숫자로 시작하면 안된다.
  4. 특수문자는 _,$ 만 사용할 수 있다.
  
관례적 규칙
  1. 역활에 맞는 의미있는 명칭을 사용하자
  2. 한글 풀어쓰기를 하지 말자
  3. 약어 사용을 자제하자.
  4. 케멜표기법에 따라 소문자로 시작하고 두단어이상인경우 대문자를 사용한다.
  5. 상수 변수 즉, final 변수는 대문자로 작성하고 두단어 이상일때 _ 사용
  
  
리터럴 값(literal value) : 프로그램 소스에 값 자체가 직접 표현된것
  int a = 100;               
  if(average >= 90.0){
     ...
  }
  System.out.println("JICA");
  
상수(const) 값 ==> 상수 변수
  final int MAX = 1000;  //선언시 초기값 지정이 일반적이고 
  이후에는 MAX값을 변경할 수 없다.
  
  final int UPPER;
  ...
  UPPER = 1000;    //최초 한번만 값을 할당 할 수 있다.
  ...
  UPPER = 2000;    //이후에는 값을 변경할 수 없다.
       
  -------------------
  int a = 100;     //4byte int형  literal value
  long b = 100L;   //8byte long형 literal value
  
  float  f = 3.14; //error 4byte float변수 f에
                   //      8byte long형 literal value를 저장할 수 없다.
  float f = 3.14F; //ok    4byte float literal value
          
  int x = 25;      //decimal digit(10진수)
  int x = 0b11001; //binaray digit(2진수)
  int x = 031;     //octal   digit(8진수)
  int x = 0x19;    //hecxa   digit(16진수)
  
  //큰정수값은 자릿수를 끊어서 _(언더바) 사용 가능
  long big = 10_000_000_000L;           10진수는 3자리씩
  long hex = 0xFFFF_FFFF_FFFF_FFFFL;    16진수는 4자리씩
        
  
-----------------------------------------
자동 형변환 규칙 : 작은값은 큰값의 자료형에 저장할 수 있다.
      1         2         4         8         4         8
    byte ---> short ---> int ---> long ==>  float --->double
              char  ---^
              

참고) null은 예약어이다.
     참조변수 즉, 배열이나 객체에만 저장할 수 있다.
     참조변수는 위치정보를 저장하는 변수이다. 고정된 크기 4byte이다.
     null은 아직 위치정보가 결정되지 않았다는 의미를 가진다.
     이때 즉, null값을 가진 변수를 접근하면 에러가 발생한다(NullPointerException)
                   
참고) 클래스는 멤버변수와 메서드로 이루어 진다.
     일반적으로 클래스를 이용하여 객체를 생성하고 멤버변수와 메서드를 사용한다.
     메서드 중에서 static메서드는 객체없이도 호출할수 있다.
     우리가 사용한 다음의 메서드가 이런 부류이다.
     
     //객체생성없이 클래스를 직접사용
     클래스명.메서드();
     Integer.toBinaryString()    //static 메서드
     Integer.parseInt();         //static 메서드
     
     //Scanner클래스로 객체생성
     Scanner scanner = new Scanner(System.in);
     scanner.nextLine();         //일반 메서드
     scanner.nextInt();          //일반 메서드
     
                       