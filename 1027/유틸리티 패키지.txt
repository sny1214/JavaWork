java.util 패키지
: 자료 구조 관련 class들을 "collection framework"라고 부른다.			*collection(대량의 데이터)
 - 개별적인 코딩이 아닌 표준적인 개발 방법론을 적용하여 유지보수하기 쉽게 만들어 놓았음
 - 사용자 입장에서는, 사용이 편리(공통의 사용법을 가지고 있으므로), 코드의 중복을 방지할 수 있음


1. 대량의 데이터

2. (상황이나 목적에 따라서) 효율적으로 관리 = 데이터를 추가, 수정, 삭제, 검색, 정렬 ... 등의 기능을 수행 가능
			   					    - 맨 뒤에 추가 : append, 중간에 삽입 : insert 사용
--> 자료의 저장방법(구조) 
	1. 선형구조 : 일렬로 저장. 처음과 끝의 개념이 있음. 특정 데이터 기준으로 이전과 다음이 존재
	   1) 순수 선형구조 : 배열 (연속된 값들이 있는 것) 요소를 관리할 때,
       				   데이터 추가할 때 항상 첫 위치에, 그다음 데이터는 다음 위치에 -> 추가하는 규칙들이 정해져 있다.
	   				   삭제하는 규칙들이 있다. 등 관리 규칙o
				   	   추가, 삭제 위치 정해져 있지 않아. 아무데서나 추가, 삭제 가능		   
				  					   				   
----* 내부 저장 구조 *---------------------------------------------------------------------------------------------------------------------
	 배열, 리스트 사용 ->데이터 저장 방법이 내부적으로 다르므로, 수정, 삭제 등의 내부의 로직들도 배열인지 리스트인지에 따라 다르다
	
	  - 배열 (array) => 데이터 접근 속도 빠름(배열의 위치만 알면 됨 -> arr[i]), 데이터 추가, 삭제할 때 데이터 옮겨야 한다는 단점
	  
	  - 리스트 (link 사용) : 데이터 저장할 공간을 먼저 확보하지 않고, 데이터 저장할 때 확보하고
    					  실제 데이터 저장영역, 링크 저장 영역(다음 데이터 저장 공간 어디로 할 것인가(이땐 null) -> 링크 저장 영역에서 다음 데이터 들어오면 그 공간과 연결해 줌)
                   		중간 데이터 삭제 시, 링크 저장 영역에 그 다다음 데이터 주소로 저장됨.
		 				=> 배열보다 데이터 접근 속도는 느리지만, 데이터를 좀더 빠르게 추가 or 삭제할 수 있다는 장점
------------------------------------------------------------------------------------------------------------------------------------------				  					   				   						
				  					   				   						
		2) 제한선 선형 구조 : 추가 삭제 위치가 정해져 있다. 예) 맨 앞에만 추가, 맨뒤만 삭제 등
				 |--> 스택, 큐
				 
				   - 스택 : 들어오는 장소 = 나가는 장소 : LiFo(Last in, First out) 나중에 들어온게 나갈때 제일 처음으로 나간다.
				   - 큐 : 들어오는 장소와 나가는 장소가 다르다
				  						  
				  						  
	2. 비선형구조 : 여러개의 처음과 끝이 있음. 어떤게 처음이고 끝인지 명확x
				  가장 대표적인 게, 트리구조, 그래프 구조
		
				  - 트리구조 : 들어오는 경로가 하나로 허용
				  - 그래프구조 : 들어오는 경로가 여러개..
				  
				  
				  
					<collection>
					
	(interface)				(interface)			(interface)			
	List					Set					Map
	<선형 구조>									
 	1. 순서가 중요				1. 순서 중요x			1. key-value의 쌍(fair)으로 구성
	2. 중복 허용				2. 중복 허용x			2. key 	 :중복 허용x
												   value : 중복 허용o
		^						^
		|						|				    ^
		|						|				    |		
|--	Array list				Hash Set			Hash Map----|	
|	Linked list				Tree Set			Tree Map	|
|	Vector					  ...				Hash Table	|
|	Stack										   ...		|===> 실제로 사용하는 것!	
|	 ...	   												|
|-----------------------------------------------------------|