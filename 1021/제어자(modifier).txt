제어자(modifier) : 클래스, 변수 또는 메서드의 선언부에 함께 사용되어 
                 부가적인 의미를 갖게하는 예약어들
                 
 1) 접근제어자 :  private  < default < protected < public
 2) 그    외 :  static, final, abstract, synchronized(Thread의 동기화에서 사용), ...
      
1. static 
   1) 클래스의 멤버변수 ==> 클래스 변수(static 변수)
                       - 객체생성이전에 정적영역에 확보되고 초기화 된다.
                       - 클래스명.static멤버변수 
   2) 클래스의 메서드  ==> 클래스 메서드(static 메서드)
                       - 객체생성이전에 호출하여 사용할 수 있다.
                         클래스명.static메서드()
                       - 클래스 메서드 내부에서는 클래스변수와 지역변수 혹은 매개변수만 사용할 수 있다.
                         즉, 인스턴스변수는 사용할 수 없다.
                         this표현을 사용할 수 없다.
                       - 클래스 메서드 내부에서는 클래스 메서드만 호출할 수 있다. 
                         인스턴스메서드 호출 불가능
   3) 초기화 블럭    ==> static 초기화 블럭
                       - 프로그램이 시작하자 마자 단한번 동작하여
                         static멤버변수를 초기화한다(복잡한 로직 수행 가능)
 
2. final 
   1) final 지역변수 ==> 메서드내부의 지역변수(매개변수)에 final을 사용하면 
                      final 지역변수는 최초값이 할당된 이후에는 내용값을 변경할수 없다.
   2) final 멤버변수 ==> final 멤버변수는 명시적 초기화나 생성자에서 값을 최초할당한 이후에
                       값을 읽을수만 있고 변경은 불가능 하다.  
   3) final 메서드  ==> 하위클래스에서 재정의 할 수 없는 메서드
   4) final 클래스  ==> 하위클래스에서 상속 할 수 없는 클래스   
   
3. abstract - 추상의, 미완성의 (c++등의 언어에서는 virtual을 사용한다) 

   abstract class A{
      ...
      void method1(){  //일반메서드
        //....
      }      
      
      abstract void method2();  //추상메서드
   }

   1) 추상 메서드 : 메서드의 선언부만 있고 구현부(내용부 - { 실행코드; })가 없다.
   2) 추상 클래스 : 추상메서드를 1개라도 가지고 있으면 반드시 추상클래스로 작성해야 한다.
   
   ==>상세문법은 교재 375page에서 학습하자.                                                                                                                                                       