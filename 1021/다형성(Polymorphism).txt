다형성(polymorphism) : 여러 가지 형태를 가질수 있는 능력
   Java언어에서는 한타입의 참조변수에 여러타입의 객체를 참조할수 있도록 하는것
   
   class A{    class B{      class C{
     //          //            //
   }           }             }
   
   A obj = new A();  //ok 
   A obj = new B();  //error
   A obj = new C();  //error
   -------------------------------
   class A{
     //
   }
   
   class B extends A{
     //
   }
   
   class C extends A{
     //
   }  
   
   Java언어에서는 =======================================
   1) 상위형 참조변수에 하위형 객체를 저장할 수 있다(중요) 
      Tv tv = new CaptionTv();
      
   2) 하위형 참조변수에 상위형 객체를 저장할때는 하위형 객체로 형변환을 해야한다.
      (컴파일은 통과하지만 실행시 런타임 에러가 발생한다)   
      CaptionTv ctv = (CapionTv)new Tv();  //실행시 run-time error
                                           //실제저장되는 객체가 상위형 객체이다
      Car car = null;
      FireEngine fe = new FireEngine();
      car = fe;                          //상위형에 하위형 저장
      FireEngine fe2 = (FireEngine)car;  //하위형에 상위형을 저장
                                         //정상실행
                                         //실제저장되는 객체는 하위형 객체이다.  
      
   3) 상위형클래스의 메서드를 하위클래스에서 재정의(overriding)한 경우는 
      다형성의 모습이 나타난다   
      
      하위형타입 --> 상위형타입(Up-casting) : 생략가능
      하위형타입 <-- 상위형타입(Down-castion) : 반드시 형변환을 해야 한다.
      
      컴파일 시점에서는 참조변수의 자료형을 가지고 문법검사를 하고
      실행 시점에는 실제 참조변수가 가리키는곳의 인스턴스가 상위형이냐 하위형이냐가 중요하다.
         실행 시점에서 특정객체가 어느 클래스의 인스턴스인가를 알아보는 연산자가 있다.
          ==> instanceof
   ===================================================   
   A obj = new A(); // ok
   A obj = new B(); // ok
   A obj = new C(); // ok
   
   
구체적인 다형성의 활용방법
1) 상위형 객체에 하위형 인스턴스를 저장하여 사용
2) 매개변수의 자료형으로 상위형을 쓰고
   실제 메서드를 호출할때 하위형 인스턴스를 인자로 전달
3) 배열생성시 배열의 자료형을 상위형으로 선언하고
   배열요소를 하위형 인스턴스로 생성하여 이용
         