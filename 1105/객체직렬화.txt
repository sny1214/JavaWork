교재 934page~
직렬화(ObjectOutputStream/ObjectInputStream)
  객체를 byte[]배열로 저장하고, byte[]을 이용하여 다시 객체를 만들 수 있는 기능을 말한다.
	
   객체의 내용을 byte[]로 만들어서 화일에 저장할 수 있다.
   또한 이렇게 저장된 화일로 부터 읽어서 객체를 생성할수 있다.
   
   객체는 멤버변수와 메서드로 구성되는데 이때 직렬화/역직렬화의 대상은 멤버변수뿐이다.
   
   							  --> Network 전송
    객체  ------------>byte[]  --> 화일에 저장
         직렬화(Serialization) 
         ObjectOutputStream
         
        <-----------         <-- 화일내용
         					 <-- Network 수신
         역직렬화(ObjectInputStream)    
     
     단, Serializable interface를 구현하여 만들어진 클래스만 가능하다.
     
객체 직렬화(Serialization)

	    객체 -----직렬화------------>byte[]
         <-----역직렬화------------

  객체를 스트림으로 만드는것(멤버변수-Field 의 값만 대상이 된다.) 
      -----
      byte[]
      
      
      class UserInfo{
      	....
      }
      
      UserInfo ui = new UserInfo();
      ...
      
      ObjectOutputStream oos = new ObjectOutputStream();
      
      
 Serializable 인터페이스를 구현하여 작성된 클래스의 객체만 직렬화가 가능하다.
 
 작업수행시 다음의 클래스를 사용한다.
 
 ObjectInputStream     역질렬화 기능을 작동시킨다.
 ------------------
 public ObjectInputStream(InputStream in) throws IOException
 
 기본자료형 readXXX()
           ---byte,int,double,...
 String readUTF()  
 Object readObject()        
 Object defalutReaad()
 
 
 ObjectOutputStream    직렬화 기능을 작동시킨다.     
 -------------------     
 protected ObjectOutputStream(OutputStream out) throws IOException
 
 void writeXXX(기본자료형)
           ---byte,int,double,...
 void writeUTF(String)  
 void writeObject(Object)        
 void defalutWrite(Object)
    
    
 참고) 자바에서 제공되는 여러 클래스중에서 Serializable 구현해서 만들어진 
      클래스들은 직렬화가 가능하다. 
      
--------------------------------------
직렬화 가능한 클래스를 만들때 Serializable 인터페이스를 구현하다고 선언만 했고
재정의한 메서드가 없었다.

만일 사용자가 직접 개입하여 직렬화 코드를 작성하고 싶다면 아래의 메서드를 직접 재정의하면 된다.
이때 멤버변수 하나 하나를 직접 질화시켜야 한다.(writeXXX(), readXXX()) 
 void writeObject(Object) throws IOException 
 Object readObject() throws IOException,ClassNotFoundException        