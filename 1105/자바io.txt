ava언어에서의 입출력

1. 입출력의 종류

  1)기본 입출력(표준입출력-Console)
  	  표준입력 : System.in     InputStream    키보드
  	  표준출력 : System.out    PrintStream    모니터
  	  
  	  Scanner scanner = new Scanner(System.in);
  	  
  	  	
	  입력(input)     Memory          출력(Output)
	                 |- 변수 ------>  Moniter   
	  keyboard ----->|- 객체   
	                 |- 배열
	                 
  2) 메모리  --입력----> 메모리(변수,배열,객체)               
           <-출력-----
           
  3) 메모리(변수,배열,객체) ---출력------>보조기억장치
                      <--입력------   file
                      
  4) 현재컴퓨터 ---------통신port-------------다른 컴퓨터
     메모리(변수,배열,객체) ---출력------------->                            
                      <--입력-------------- 

2. Java언어에서의 입출력 기능 --- java.io 패키지에 다양한 클래스 

   스트림(stream) : 일반단어의 뜻은 흐르는 강물이다. 이것의 특성을 가져와서(위에서 아래서, 끊임없이 연결되어 있다, 연결해서 사용가능)
       컴퓨터 전반에서 사용하는 스트림은 데이타를 운반하는데 사용되는 연결통로의 뜻으로 사용한다.
                               --------------------------
                                
       1) 연속된 데이타 ==> byte[],char[]
       2) 단방향성(입력기능만 수행, 출력기능만 수행) 
       3) 새로운 연결(스트림과 스트림을 연결)          
       
   예) 키보드로 입력받을때 
                       키보드 버퍼(byte[])     Scanner s = new Scanner(System.in);
      키보드 abc엔터  ----------------                                 ---------
                   |a|b|c|\n|\r| | |         <-----------------------------|
                   ----------------       
                                           String str = s.nextLine();
   
   
3. java.io 패키지에서 제공되는 클래스들의 종류
   byte기반 스트림 : 1byte혹은 byte[]에 입력/출력      
   character기반 스트림 : 1문자 혹은 char[]에 입력/출력 -- 한글처리 가능
   
   1) byte기반 스트림
      입출력의 대상이 byte단위로 이루진다(1 byte, byte[])
   
         입력 - abstract InputStream            
         ======================      
         abstract int read()	
         int	read​(byte[] b)	
         int	read​(byte[] b, int off, int len) 
                ....
      
         출력 - abstract OutputStream
         ======================
         void	write​(byte[] b)	
         void	write​(byte[] b, int off, int len)	
         abstract void	write​(int b)
         void	flush()
             ...
       
    실제 사용하는 클래스-------------------------------------
    기반스트림    
       1) ByteArrayInputStream, ByteArrayOutputStream
     v 2) FileInputStream,      FileOutputStream
     
    보조스트림 - FilterInputStream, FilterOutputStream
       객체생성시 생성자로 반드시 다른 Stream을 인자로 사용해야 한다.
     v 3) BufferedInputStream,  BufferedOutputStream
     v 4) DataInputStream,      DataOutputStream
     v 5) ObjectInputStream,    ObjectOutputStream
     
       java.lang.Object
         java.io.InputStream
            java.io.FileInputStream
            
            
       java.lang.Object
         java.io.InputStream
            java.io.FilterInputStream  ----- 다른 스트림과 연결시켜서 사용할수 있게 있다.
               java.io.DataInputStream     
     
                
   2) character기반 스트림
      입출력의 대상이 character단위로 이루어진다( 2byte --> char, char[])    
          
         입력 - abstract Reader               
         ==============
         int	read()	
         int	read​(char[] cbuf)	
         abstract int	read​(char[] cbuf, int off, int len)
             ...
                

         출력 - abstract Writer
         ==============    
         void	write​(char[] cbuf)	
		 abstract void	write​(char[] cbuf, int off, int len)	
		 void	write​(int c)	
		 void	write​(String str)	
		 void	write​(String str, int off, int len) 
		 abstract void	close()	
		 abstract void	flush()  
		     ...
		     
	실제 사용하는 클래스-------------------------------------
	기반스트림    
       1) CharArrayReader,      CharArrayWriter
       2) StringReader,         StringWriter 
     v 3) FileReader,           FileWriter
    보조스트림 
       객체생성시 생성자로 반드시 다른 Character Stream을 인자로 사용해야 한다.
     v 3) BufferedReader,       BufferedWriter
     v 4) InputStreamReader,    OutputStreamWriter      

     v File class ==> file이나 directory의 정보를 관리하는 클래스   
     v RandomAccessFile ==> 임의접근화일(유일하게 입력스트림과 출력스트림을 동시에 가진다)  
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 사용법을 익혀보자 ( 교재 예제 )
  
  Byte계열 기반 스트림 사용법
   
  1) ByteArrayInputStream, ByteArrayOutputStream
      1byte혹은 지정된배열을 이용한 byte단위로 입출력을 수행하는 스트림
 
  2) FileInputStream, FileOutputStream
      file로 부터 읽거나 file에 출력시킬때 사용하는 스트림
      
2) Byte계열의 보조 스트림 -- FilterInputStream, FilterOutputStream을 상속받아 만들어 졌다.
   생성시 반드시 Byte계열이 스트림을 인자로 사용해야 한다.
   
   1) BufferedInputStream, BufferedOutputStream
      사용법에서는 변화가 없지만 내부적으로 데이타를 읽거나 출력할때
      내부에 버퍼를 사용하여 처리속도를 개선시킨 스트림
      
   2) DataInputStream, DataOutputStream
                           DataOutputStream 
      기본자료형(int,float,...) --(1)--> byte[]
                            <--(2)--  
                           DataInputStream
                           
      DataInputStream      DataOutputStream
      ---------------      ----------------                 
      readXXX()            writeXXX()
          ---기본자료형            ----기본형
       
      예제) DataOutputStreamEx1.java 실행후 DataInputStreamEx1.java
           DataOutputStreamEx2.java 단독실행
           DataOutputStreamEx3.java 실행후 DataInputStreamEx2.java ==> 일반 try catch구문   ------|
                                         DataInputStreamEx3.java ==> try resource catch구문 ---|동일기능수행
   3) SequenceInputStream : 여러개의 InputStream을 연결시키는 기능을 가졌다.
      PrintStream은 기본자료형을 문자,문자열로 변환해주어 출력하는 기능을 가지고 있다.
      
      PrintStream은 이미 System.out, System.err의 자료형인것을 알고 있다.
      우리가 자주 사용한 printf(), print(), println()등은 PrintStream의 메서드이다.
                                                    
   4) ObjectInputStream, ObectOutputStream ==> 객체 직렬화(교재 934page)    
      객체를  byte[]변환 : ObjectOutputStream
      byte[]을 객체로 변환 : ObjectInputStream
      
3) character기반의 스트림들
       Reader          Writer
   1) 문자기반 스트림
       FileReader,   FileWriter
       PipedReader,   PipedWriter(쓰레드간의 데이타 입출력에서 사용 - 생략)
       StringReader, StringWriter
             
   2) 문자 보조 스트림
      다는 character스트림을 생성자의 인자로 사용하는 보조 스트름
      
      InputStreamReader, OutputStreamWriter <-- byte단위입출력이 char단위 입출력이 가능하도록 연결
      BufferedReader, BufferedWriter
       

참고) Java언어의 표준 입출력
     System.in ==> 표준입력(키보드)             InputStream
     System.out ==> 표준출력(모니터) --- 검정색   PrintStream
     System.err ==> 표준에러(모니터) --- 빨강색   PrintStream

    System클래스의 다음메서드를 사용하여 표준입출력의 대상을 바꿀수 있다.
    static void	setErr(PrintStream err)	
	static void	setIn(InputStream in)	
	static void	setOut(PrintStream out)
	
	참고)  System.out.println(다양한값);
             ===.print();
              | .printf();
              |  
              |-->PrintStream   기본자료형을 문자형태로 변환시켜 출력시키는 기능
  	File
  	
  	ObjectInputStream/ObjectOutputStream

참고 ) 파일로 입출력을 하려면 우리는
	  FileInputStream, FileOutputStream, FileReader, FileWriter를 이용한다.
	  그런데 위의 입출력작업은 순차처리에 의하여 모두 이루어진다.(처음부터 끝까지 차례로 진행)
	  
	  test.txt
	  홍길동
	  이순신
	  장길산
	  
	  필요에 따라서 임의의 위치에 값을 출력(쓰고)하거나 입력(읽어오는)받는 기능이 필요하다.
	  이를 위해서 RandomAccessFile클래스를 제공해주고 있다(byte계열 Stream).
	  
	  //입출력기능이 동시에 가능한 파일관리 클래스이다.  
	  class RandomAccessFile implements DataInput, DataOutput{
	  		...						//다양한 입력메서드		readXXX()
			...						//다양한 출력메서드		writeXXX()
	  		
	  		void seek(long pos) 	//입출력의 위치(FilePointer)를 이동시키는 메서드
			long getFilePointer()	//파일 포인터값 얻기
			long length()			//현재파일의 크기
	  }
	
	  - FilePointer : 입출력의 위치
	  
	  - RandomAccessFile 의 객체 생성시 화일의 접근 모드를 지정할 수 있다.
	    입력용(Read), 출력용(Write), 입출력용(Read/Write),
	    		
	    "r", "w", "rw",
	    
File 및 디렉토리 정보와 관리기능을 수행하는 클래스 ==> File 클래스
1) 일반적으로는 존재하는 화일이나 디렉토리를 대상으로 File객체를 생성하지만
   반드시 존재하는 화일이나 디렉토리를 대상으로 File의 인스턴스를 생성하지 않아도 된다.

   화일을 대상으로한 File 인스턴스
   디렉토리를 대상으로한 File 인스턴스    
                     
         File​(File parent, String child)	
		 File​(String pathname)	
		 File​(String parent, String child)	
		 File​(URI uri)
         ------------------------------     
         boolean	isDirectory()	
         boolean	isFile()
         String		getName()  		파일명 얻기
         String		getPath()  		경로+파일명 얻기
         String		getParent()  	경로 얻기
         boolean 	exists()		실제파일이나 디렉토리가 존재하는지 여부
         File[]		listFiles()		내부의 파일 및 디렉토리를 File객체배열로 만들어서 리턴해준다.
         boolean	canRead()	
		 boolean	canWrite()
		 boolean 	isHidden()
		 long		lastModified()
		 
	차후에 파일 정보를 이용할 프로그램을 작성할 때 유용할 수 있으니 나머지 예제 실습!	 
                  
참고 ) 화일의 종류
      1. Text file
         메모리의 내용값을 문자로 변환시켜 저장한 형태
                                 int(4byte) ---> 각값을 문자데이타로변환
         int a = 50;           a |||||  화일로저장   50      2byte
         int b = 426378;       b ||||| -------->  426378  6byte
                                                data.txt
                                                  
                                                 화일의 내용을 사용자보고 그 의미를 알수있다.
                                                 Text Editer에 그내용을 확인할수도 있고 신규 작성할수도 있다.
      2. Binary file 
         메모리의 내용값을 그대로 byte배열로만 화일에 저장한다.
                                 int(4byte) DataOutputStream
                                        화일로저장
         int a = 50;           a ||||| -------->  |||||   4byte
         int b = 426378;       b ||||| <--------> |||||   4byte
                                        화일에서읽어올때  
                                DataInputStream   data.dat
                                                      .bmp <=== 전용 프로그램으로만 내용 확인 가능
                                                      .hwp   
                                                   ...    
                                                
                                                 화일의 내용을 사용자가 보고 그 의미를 알수없다.       
                                                 
 