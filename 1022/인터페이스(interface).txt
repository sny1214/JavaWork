1. 인터페이스(interface)는 일종의 추상클래스이다.
2. 추상클래스보다 추상 정도가 높아서 일반멤버변수나 메서드는 가질수 없다.
3. 인터페이스 
   1) 모든 멤버변수가 public static final 특성이 가진다(상수멤버변수)
   2) 모든 메서드가 추상메서드 이다.
   
   ==> 일반 클래스와 너무 다른 특성을 가졌으므로 아예 클래스라는 명칭을 사용하지 않고
       별도의 명칭 - 인터페이스(interface)- 으로 부른다.
       
4. 문법
   1) 일반클래스
   class A{
     ...
   }        
   
   2) 추상클래스
   abstract class B{
     ...
     abstract void method();
     ...
   }  
   
   3) 인터페이스
   interface I{
     //모든 멤버변수가 상수멤버변수이다.
     public static final int a = 1;
     ...
     //모든 메서드는 추상메서드이다.
     public abstract void method();
     ... 
   }
   ----------------------------------
   인터페이스로는 객체를 생성할 수없다.
   1) 인터페이스를 상속받을 수 있다(extends)
      상속받은 클래스도 인터페이스가 된다.
      interface I{
        public abstract void m1();
      }
      
      interface I2 extends I{
        public abstract void m2();
      }  
   2) 인터페이스를 구현할수 있다(implements) 
      인터페이스의 모든 추상메서드의 본체부를 작성하여 일반클래스로 만든다.
      그러므로 객체를 생성할 수있다.
      interface I{
        public abstract void m1();
        public abstract void m2();
      }   
      
      interface I2{
        public abstract void m3();
      } 
      
      인터페이스를 구현한 일반클래스 ==> 객체 생성 가능
      class IC implements I{
        public void m1(){
           ...
        }
           
        public void m2(){
           ...
        }
      }
      
      인터페이스를 다중구현한 일반클래스 ==> 객체 생성 가능
      class IC2 implements I,I2{
        public void m1(){
           ...
        }
           
        public void m2(){
           ...
        }
        
        public void m3(){
           ...
        }
      }
      
   3) 인터페이스를 상속받아서 일부메서드만 구현하면 추상클래스가 된다.
      interface I{
        public abstract void m1();
        public abstract void m2();
      }
      
      인터페이스를 상속받아 일부메서드만 구현하면 추상클래스 이다.
      abstract class AI extends I{
        public void m1(){
           ...
        }
        
        //추상메서드  m2() 는 재정의 하지 않았으므로 추상메서드를 그대로 가지고 있다.
      }
      
      //일반클래스 
      class IC extends AI{
         ...
         public void m2(){
          ...
         } 
      }
      
    4) 인터페이스는 다중상속이 가능하다.
       interface I{
         public abstract void m1();
       }  
       
       interface I2{
         public abstract void m2();
       }
       
       interface I3 extends I,I2{
         public abstract void m3();
       }
       
       //일반 클래스 ==> 객체 생성 가능
       class IC implements I3{
         public void m1(){ //I 인터페이스의 m1() 재정의
           ...
         }
         
         public void m2(){ //I2 인터페이스의 m2() 재정의
           ...
         }
         
         public void m3(){ //I3 인터페이스의 m3() 재정의
           ...
         }
       }
       
     5) 상속과 구현을 동시에 적용할 수 있다.
       interface I{
         public abstract void m1();
       }
       
       interface I2{
         public abstract void m2();
       }
       
       class C{  //일반클래스
         ...
         public void method(){
           ...
         }  
       } 
       
       //일반클래스 - 상속과 구현
       class D extends C implements I{
          ...
          public void m1(){
             ....
          }    
       } 
       
       //일반클래스 - 상속과 다중구현
       class F extends C implements I,I2{
          ...
          public void m1(){
             ....
          }  
          
          public void m2(){ 
             ....
          }  
       } 

최종 결론 아래의 내용만 숙지하고 있자.
1) interface를 상속(extend)하면 interface가 된다.
2) interface는 다중상속이 가능하다.
3) interface를 구현(implements)하는는 것은 하위클래스에서
   interface의 모든 추상메서드를 재정의(override)한다는 의미이다.   
   하나라도 메서드를 빼놓고 재정의를 하면 추상클래스가 된다.     
   
추상클래스와 마찬가지로 우리가 직접 interface를 만드는 경우는 드물다.
대부분 클래스라이브러리에 제공되는 interface를 우리가 만드는 클래스에서
구현하여 사용하는것이 일반적이다. 
        