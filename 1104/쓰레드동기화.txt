3. 쓰레드 동기화(교재 767page)
   임계영역(critical section) : 쓰레드 내부의 코드중 공유데이타를 접근하는 코드
   class SData{
      int a = 100;
      int b = 200;
   }
   
   SData sData = new SData();
   
   MyThread t = new MyThread(sData, "작업쓰레드1");
   MyThread t2 = new MyThread(sData, "작업쓰레드2");
   t.start();
   t2.start();
   
   class MyThread extends Thread{
      int x = 10;
      int y = 20;
   	  SData s = null;
   	  
   	  MyThread(SData s, String name){
   	    super(name);
   	    this.s = s;
   	  }
   	     
      public void run(){
         int z = 30;
         
         //쓰레드에서 실행할 코드
         x,y,z를 이용하는 코드 -- 쓰레드의 개별 데이타
         
         s를 이용하는 코드 -- 여러 쓰레레드에서 공유하는 데이타
         statement1; ---|
         statement2;    |임계영역(critical section)
         statement3; ---| 
         
         x,y,z를 이용하는 코드 -- 쓰레드의 개별 데이타                
      }
   }
   
   잠금(lock) : 특정쓰레드가 임계영역을 실행하게되면 해당 쓰레드가 락 혹은 모니터를 가졌다고 한다.
               이 의미는 다른쓰레드로 제어권이 넘어가도 다른쓰레드에서 공유데이타를 접근하려면 락 즉, 모니터를
               소유하지 못하므로 공유데이타를 접근하는 코드를 수행할 수 없게된다.
               
   쓰레드 동기화 : 각 작업 쓰레드가 동작할때는 해당 쓰레드만 사용하는 
               별도의 스택이 만들어 지고 run()메서드 내부에 선언한 변수들이 
               확보되어 개별메모리공간에서 실행되어진다.
               그런데 상황에 따라서 여러개의 쓰레드가 동시에 특정 메모리 공간을
               공유하여 사용할 때 가 있다.
               이때 특정 쓰레드가 공유메모리를 대상으로한 실행코드를 마무리짓지 못했는데
               중간에 쓰레드가 교체되는 경우가 발생한다.  그러면 교체된 다른 쓰레드에서
               공유메모리를 접근하여 값을 변경시키면 원래의 쓰레드로 돌아왔을때
               공유메모리값이 달라졌으면 동일코드를 실행시킨다고 해도 원치 않는 결과값이
               만들어진다.  이러한 경우를 미연에 방지하려고
               특정 쓰레드가 공유메모리를 접근하는 코드를 실행중이면 중간에 쓰레드가 
               교체되어도 다른 쓰레드에서 공유메모리를 접근하려고 하면 강제로 접근하지 못하도록 만드는 기법을
               쓰레드 동기화 라고 한다.
               
  Java의 동기화 기법
  1) synchronized 를 이용 -- 시스템적인 작동구조
  
     (1) synchronized block
     void run(){
        실행코드1;
        synchronized(공유객체) {
           실행코드2;  <--- 공유메모리를 접근하는 코드
        }
        실행코드3;
        실행코드4;
     }
     
     (1) synchronized method
     void run(){
        실행코드1;
        critical();
        실행코드3;
        실행코드4;
     }
     
     synchronized void critical(){
         실행코드2;  <--- 공유메모리를 접근하는 코드
     }
  
 2) wait(), notify(), notifyAll() -- 사용자가 로직으로 개입하여 좀더 유연한 코드를 작성하는 방법
             
 3) Lock, Condition 사용 <--  Java 8.0이상에서 추가된 기법
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~               