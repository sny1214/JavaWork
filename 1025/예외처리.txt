프로그램을 작성 및 실행하는 과정에서는 발생된 잘못된 결과를 총칭해서 오류(에러-Error)라는 표현을 사용한다.
물론 버그(bug)라는 용어도 일맥상통하는 용어이다.

1. 예외처리의 개요
             컴파일/링크 에러
    |----------|<<--------------------디버깅과정-----------로직에러 ------------------|
    V          |                                                                |
(원시프로그램)     |                                                                |
Test.java ---컴파일(러)---->Test.class---->메모리에 로드하여 실행                        | 
             1)문법검사                       (1) 정상 종료---->1. 원하는 결과          |   
             2)link(라이브러리)                               2. 원하는 결과가 아니다 ---| 
                                                             (로직이 불완전하다)              
                                           (2) 비정상적인 종료-->실행중에 예기치 못한 상황 발생하여 중단
                                                 원인-->주변환경(os,h/w) 혹은 사용자의 실수
                                               ====런타임 에러(runtime-error)=======
   비정상적인 종료 상태를 근본적인 원인과 해결방법에 따라 2가지로 분류
   1. 에러(복구시킬수 없는 치명적인 오류)
   2. 예외(복구가능성을 가지고 있는 덜 치명적인 오류) ==> 우리가 학습하는 주제
   
2. Java언어에서의 위의 개별적인 원인에 따라 다양한 클래스를 준비하고 있다.  
   그러면서 아래의 예외클래스 계층에서 RuntimeException 및 하위클래스를 제외한 모든 예외상황은
   반드시 예외처리를 하도록 강제하고 있다.(안하면 컴파일 오류)  

        Object 
        Throwable
    Error      Exception(예외관련 최상위 클래스)
                  IOException
                  ReflectiveOperationException
                     ClassNotFoundException
                  SQLException
                  InterruptedException
                  ...
                |-RuntimeException-----프로그래머의 실수일 가능성이 높다.----------------|
                |     ....                                                     |
                |     ArithmeticException  -- 0으로 나누었을때                      |
                |     ClassCastException   -- 클래스간의 형변환을 잘못했을때            |
                |     NullPointerException -- 참조변수가 null을 경우 멤버에 접근했을때   |
                |      IndexOutOfBoundsException                               | 
                |         ArrayIndexOutOfBoundsException -- 배열첨자범위를 벗어났을때  |
                |         ....                                                 |
                |--------------------------------------------------------------|
                  
    프로그램 실행중 실행오류가 발생하면 JVM이 위의 클래스 계층에서 현재 상황에 부합되는 클래스로 객체를 만들어서
    사용자에게 알려준다.
    우리는 해당 예외정보를 객체로 받아서 아래의 2가지 방법으로 예외처리를 한다.
        
    1) 직접 처리(try catch finally 블럭사용)
    2) 현재 코드를 호출한 상위로 던져주기(throws 문 사용)
    
   예외상황에따라 다양한 예외클래스를 계층구조를 가지고 만들어 놓았지만
   대부분의 예외클래스는 생성자만 있을뿐 메서드가 없다.
   메서드는 최상위클래스인 Throwable 클래스에 있다.  
    
3. 예외처리하기 - 직접 처리(try catch블럭)

   실행코드1
   실행코드2
   
   try{
      실행코드3(예외발생 가능성을 가진 코드) -->1)예외발생안함
                                      2)예외발생(JVM이 예외발생원인을 객체로 만들어서 
                                        아래 catch의 매개변수로 전달해준다) 
   }catch(예외클래스 예외객체){
      예외객체정보를 해석하여 적절한 코드를 실행(복구코드)
      return;
   }finally{
      실행코드3에서 예외가 발생하거나 안하거나 무조건 실행해야 하는 코드
   }   
   
   실행코드4
   
4. 프로그래머가 인위적으로 예외객체를 직접생성하여 예외를 발생시킬수 있다.
  1) 예외객체 생성
  2) 예외발생 시키기 ==> throw 예외객체;   
   
5. 최종적으로 예외처리도 특정클래스라이브러리의 클래스를 사용하려 할때 
   해당 클래스의 특정메서드 선언부에 throws절이 있다면 
   반드시 예외처리를 해야 한다.
   
   Thread클래스의 sleep()메서드 선언부
   ==> public static void sleep​(long millis) throws InterruptedException
                                             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~  
   해결방안1)
   try{
      Thread.sleep(1000);
   }catch( InterruptedException e ){
      복구코드
   }   
           
   해결방안2)
   void method() throws InterruptedException{
      ...
      Thread.sleep(1000);
      ...
   }   
   
   우리가 만드는 메서드도 위의 형태를 그대로 사용한다.                                     
  
6. 자동 자원 반환 예외처리구문(실무적코드 java.io패키지를이용하여 실제 화일입출력을 할때 설명)
   자원할당을 저장하는 변수 선언
   try{
      자원을 할당받는 코드;
      자원을 이용하는 코드;
   }catch( 예외클래스 예외객체 ){
     예외처리 코드  
   }finally{
     할당받은 자원을 반환하는 코드;
   }  
   
      ||
      ||
      vv
      
   try(자원을 할당받는 변수 및 코드){
      자원을 이용하는 코드
   }catch( 예외클래스 예외객체 ){
     예외처리 코드  
   } 
   
   //finally 블럭을 사용하지 않아도 자체적으로 자원을 반환하는 코드를 실행시켜 준다.
  
  
참고) File 클래스-- 보조기억장치(HDD,USB)의 화일관련 기능가진 클래스
                 주로 1개화일에 대한 다양한 정보는 디렉토리에 대한 정보를 관리한다.
                 또한 화일 생성/삭제/이름바꾸기, 디렉토리 생성/삭제 기능을 지원한다.                                 