이벤트(Event) : 사용자(버튼클릭, 항목선택, 마우스움직임, 키보드로 입력,...)나
                           시스템에(시간흐름) 의해서 상태변화가 유발되는것
                           
자바에서는 발생가능한 모든 이벤트에 대하여 이벤트 정보를 저장하는 
클래스를 만들어 놓았다. ===> XXXEvent

또한 특정이벤트가 UI객체에 발생하면 이를 처리할수 있는 코드를 작성해야 한다.
이것을 이벤트핸들러를 작성한다고 총칭한다.
이때 이벤트를 발생시키는 UI객체를 이벤트소스(event source)라고 한다.
이벤트 처리는 
이벤트소스에 addXXXListener()메서드를 이용하여 이벤트처리를 담당할
객체를 설정하는 방법으로 작성한다.
 
이벤트소스.addXXXListener( 이벤트핸들러 객체 );

이때 이벤트핸들러객체는 이벤트의 종류마다 인터페이스가 정해져 있다.
이를 구현(implements)하여 클래스를 만들고 객체를 생성한 것이다.
이때 재정의된 추상메서드가 실제 이벤트처리코드를 가진다.
이 메서드에 인자값으로 이벤트정보가 전달된다(XXXEvent객체) 
------------------------------------  
btnAdd.addActioinListener(ActionListner객체)
lName.addItemListener(ItemListener객체)
scrollbar.addAdjustementListener(AdjustmentLister객체)  
frame객체.addWindowListener(WindowListener객체)

------------------------------------
이벤트처리 클래스를 작성하는 방법
1) 별도 클래스로 작성
2) 익명의 클래스
3) Frame에서 직접 구현
4) 하나의 이벤트핸들러에 여러객체의 이벤트를 처리할수 있다.

Window나 개별기능컴퍼넌트를 대상으로한 이벤트 처리이다 ==> High level event
---------------------------------------------------------------------------
이벤트소스     		      이벤트 설정 메서드               이벤트Listener
===========================================================================					
Button					addActionListener()       	 ActionListener
TextField에서 Enter
최종메뉴항목(MenuItem)선택
 
List,Choice,Checkbox   	addItemListener()          	 ItemListener

Scrollbar 				addAdjustmentListener() 	 AdjustmentListener

Window    				addWindowListener()       	 WindowListener          
...
----------------------------------------------------------------------------      

키보드나 마우스를 대상으로 직접 이벤트를 인지하는 처리이다 ==> Low level event    
---------------------------------------------------------------------------
이벤트소스     		     	 이벤트 설정 메서드               이벤트Listener
===========================================================================
입력초점이 맞추어진 Component 								KeyListener    
   키보드를 누르거나 떼었을 때 

마우스를 클릭하거나	뗄 때								MouseListener
마우스를 움직이거나 드래그할 때							MouseMotionListener
----------------------------------------------------------------------------      

참고)이벤트 처리 Listener중에서 추상메서드가 여러개인 경우 좀더 편리하게 코딩할수 있도록
미리 Listener를 implements해서 작성해놓은 클래스가 제공된다.
이들은 XXXAdapter 명칭을 가지는 class이다.  

interface        abstract class
--------------------------------
WindowListener    WindowAdapter
KeyListener       KeyAdapter
MouseListener     MouseAdapter
  ...                ....
--------------------------------  

xxxListener --> interface를 구현(implements)하면 모든 추상메서드를 재정의해야 한다.
xxxAdapter  --> abstract class를 상속하면 관심있는 메서드만 재정의 하면 된다.

WindowListener에 7개의 추상메서드가 있다. 이것을 빈코드로 구현한 클래스가 있다.
WindowAdapter 클래스이다.
                     
마치 다음코드처럼 WindowAdapter 클래스가 만들어져있다.
class WindowAdapter implements WindowListener{
	@Override
	public void windowActivated(WindowEvent e) {
		//재정의(override)는 됐으나 실행코드를 만들어 놓지 않았다.
	}

	@Override
	public void windowClosed(WindowEvent e) {
	}

	@Override
	public void windowClosing(WindowEvent e) {
	}

	@Override
	public void windowDeactivated(WindowEvent e) {
	}

	@Override
	public void windowDeiconified(WindowEvent e) {
	}

	@Override
	public void windowIconified(WindowEvent e) {
	}

	@Override
	public void windowOpened(WindowEvent e) {
	}
}                     