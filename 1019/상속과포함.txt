1. 상속관계는 상위개념과 하위개념의 관계이다.
   상위클래스는 추상적이고 개념적이지만
   하위클래스는 구체적이고 상세하다
   
   일반적으로 is a 관계에 있다고 한다.
   
   하위클래스 is a 상위클래스 ==> 상속관계

   상속관계를 표현하는 Java언어의 예약어는 extends이다.
   class A{
     ....
   }
   
   class B extends A{
     ...
   }
   
2. 포함관계는 전체(container)와 부분(compoment)의 관계이다.

   전체가 만들어 질때 반드시 부분도 만들어져서 전체와 생사를 같이하는 
   강한 결합 상태의 관계이다.
   
   일반적으로 has a 관계, part of 관계에 있다고 한다.
   
   전체는 has a 부분  --| ==> 포함관계
   부분은 part of 전체--|
   
   class A{  // 부분에 속하는 클래스
     ..
   }
   
   class B{  // 전체에 속하는 클래스
      A a = new A();  //명시적으로 부분에 속하는 멤버변수를 생성
      ...   
   }
   
   class B{
      A a;
      ...
      A(){
        a = new A(); //생성자에서 부분에 속하는 멤버변수를 생성
      }
   } 
   
   
   //아래의 형식은 의존 혹은 사용관계라고 표현한다 ==> 포함관계가 아니다.
   class B{
      A a;
      ....   
   }  
   
실무적인 코딩에서 상속받는 코드를 작성할때는 상속의 기능과 함께
포함관계도 빈번하게 사용된다.

포함관계를 이용할때 1개를 포함할때도 있고
여러개를 포함해야 할때가 있다. 이경우 갯수가 정해져 있다면 객체배열을 사용하고
갯수가 유동적일때는 앞으로 공부하는 컬렉션클래스(자료구조 관련 클래스)-ArrayList, Stack, HashMap,..
들을 멤버변수로 사용하게 된다.

3. Java언어에서는 단일상속만 지원한다.
   하위클래스에서 상위클래스를 1개만 가질수 있다는 의미이다.
   class C extends A, B{  //error
     ..            ==== 상위클래스
   }   
   
   다중상속 즉, 상위클래스가 2개 이상인 상속을 지원하는 언어도 있다(C++)
   
   참고) 앞으로 학습하는 내용중에서 
        인터페이스(interface)는 다중상속을 지원한다.
        
   Java언어에서는 다중상속과 유사한 효과를 얻고 싶다면 상속과 포함을 동시에 사용하는 
   코딩기법을 사용한다.     

4. Java언어의 모든 클래스 Object클래스를 최상위클래스로 가진다.(자동)   
   class Item /* extends Object */ {
     String title;
     int price;
     int quantity;
     ...
   }  
참고) 상속관계에서 하위클래스의 생성자내부에서 상위클래스의 생성자를 명시적으로 
     호출할때 super()를 사용한다.
     
     하위클래스의 생성자를 포함한 모든 메서드 내부에서 super는 상위클래스의 인스턴스를 의미한다.      