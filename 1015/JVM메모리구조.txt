0. 프로그램이 시작되면 OS의 메모리 관리자가 개입하여
   현재 실행시킨 프로그램을 위한 시스템 자원(메모리 및 기타 h/w사용권한)을 할당해 준다.
   이처럼 시스템 자원을 할당받아 현재 실행중인 프로그램을 프로세스(process)라고 부른다.
   프로세스는 실제 cpu를 사용하여 실행되는 코드를 관리하기 위해 쓰레드(thread) 단위로
   동작한다(자동으로 main 쓰레드가 만들어진다)
   이후 main쓰레드 내부에서 프로그램이 동작하는 것이다.
   
1. 프로그램 실행과정과 메모리 사용
   Test.java ---> Test.class --------> 1) Test.class를 코드영역 load한다.       
            컴파일            실행           (클래스정보, 메서드별 실행코드)         
           javac.exe       java.exe    2) statUp 코드를 실행하여 데이타영역중 정적영역에
                                          Literal value 및 전역변수(클래스변수,static변수)를
                                          확보한다.  
                                       3) 코드영역의 main()메서드가 프로그램의 시작기능으로 
                                          동작하면서 stack영역을 사용한다.
                                          이후 메서드가 호출될때 stack영역에 지역변수 및 매개변수가 
                                          확보되고 동적영역에는 배열과 인스턴스가 확보되어 사용된다.
                                       4) main()메서드의 종료시에 다시 startUp코드 동작하여 
                                          마무리 작업을 수행한 후 모든 메모리를 반환하고 프로그램이 종료된다.  
            

//              |1)클래스정보(TvTest,Tv)      |<--코드영역 
//              |2)메서드별로 실행코드가 적재(load)|
//              |  main()-------            |
//              |  power()------            |
//              |  channelUp()------------- |
//              |  ------ channelDown()---- |
//              |  ------------------------ |
//              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
//              |  Literal Value 및(정적영역)  | 클래스 변수
//              |  전역변수 생성               |
//              |~~~~~~~~~~~~~~~~~~~~~~~~~~~|
//              | [null,false,6]   (동적영역) | 인스턴스 즉, 객체가 할당 
//              | 0x100      [null,false,-1]|<<== 데이타영역
//              |            0x200          |
//              |                           |
//              |                           |
//              |                           |
// channelDown()| this 0x200                |
// main()       | t 0x100  t2 0x200 (스택영역)| 지역변수와 매개변수


// 참고
   System.out.println("ABC"); 
   System.out.println(10);
   ...

// class System{
     static PrintStream err;
     static PrintStream out;
     static InputStream in;
     ...
   }  