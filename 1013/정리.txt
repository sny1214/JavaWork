import java.util.Scanner;
import java.util.StringTokenizer;

Integer은 기본 클래스 라이브러리(java.lang)  --> import할 필요 없음
-----------------------------------------------------------------------------------
// 문자열 초기화	
String line = ""; 

//입력 전용객체 선언 및 생성
Scanner scanner = new Scanner(System.in);
	
//scanner.nextLine()
: 입력한 값을 Literal value로 인식해 변수에 저장할 수 있도록

line = scanner.nextLine(); //"홍길동 70 80 90" 쓰고 엔터
	
	
//StringTokenizer 클래스
: " " 빈칸(공백문자)를 기준으로 단어를 구분하여 배열로 저장
StringTokenizer st(저장공간) = new StringTokenizer(line<--여러 단어 포함하는 문자열);

//.nextToken() : 단어 선택
name[i] = st.nextToken(); //"홍길동"



//Integer.parseInt() : 받은 문자열을 숫자로 형식 바꿔
score1[i] = Integer.parseInt(st.nextToken())

-----------------------------------------------------------------------------------

// final 변수
final int MAX = 5; --> MAX라는 변수를 상수(5)로 정해놓겠다.


//Switch문
		switch(tAverage) {
		case 10:
		case 9: grade = 'A'; break;
		case 8: grade = 'B'; break;
		case 7: grade = 'C'; break;
		case 6: grade = 'D'; break;
		default: grade = 'F';
		}
		
		
//향상된 for문 : 배열, 배열인 클래스랑 써.. 일반변수일때 ㄴㄴ

for(변수타입 변수이름 : 배열이름) {실행코드}

배열 크기를 알아서 구하고 그만큼 반복하면서 배열의 객체 하나하나를 출력함
for(Student student : students) {
			student.display();
		} 		
		
//순차정렬

for(int i=0 ; i<4 ; i++) {
			for(★int j=i+1★; j<5 ; j++) {
				if(average[i] < average[j]) {
					String tTmp = name[i];
					name[i] = name[j];
					name[j] = tTmp;
				}
			}
}						
		

--------------------------------------------------------------------------------------

//클래스Student

  ///멤버(멤버변수, 메서드())
	//멤버변수 - 필드(field)
	
	String name;
	int score[] = new int [3];
	int total;
	double average;
	char grade;
	
	===>            name	score[]   total  average  grade --> 멤버변수
 		                    [0,0,0] 
인스턴스  0x100 ---> [null,   0x500,     0,      0.0,    ' ' ]--> 인스턴스 초기화 상태
		
	//메서드

	메서드 변수(매개, 지역변수) 선언안했음에도 메서드 관련된 내용 변수를 this라는 키워드 이용해 this 관련해 바껴..
	=> 멤버변수 자유롭게 접근 가능, 	객체의 참조값을 this로 전달. this는 메서드 내부에서만!, 메서드 끝나면 this 저장공간 연결 사라져
	
	멤버변수를 전달했거나, 지역변수가 멤버변수 이름 같을 때 멤버변수를 명확히 구분해 알려주기 위해서 this 사용!
	
	
	=> 객체에 message 메세지를 보낸다. = 객체의 멤버를 사용하는 것, 객체명.멤버 , 이때 멤버 = 멤버변수, 메서드()
		|
		v
	value= value+1;
	this.value = this.value +1
	
	
		
//인스턴스화
	//객체 선언 및 생성
		Student student1; //선언
		student1 = new Student(); //생성
		=>Student student1 = new Student();

		====> student1이라는 인스턴스 생성 

	//객체 사용
	
		student1.name = "홍길동";
		student1.score = new int[] {70, 80, 95};
		
	//객체 사용 - 메서드 사용
	
		student1.calTotal();
		
//캡슐화
1. 특정 기능을 수행하기 위한 관련 있는 메서드와 멤버변수가 모여 있는 것 
2. 클래스 구성요소 중 외부에서 직접 접근을 허용하는 것(public 키워드 사용) or 허용하지 않는 것(private 키워드 사용)
	= 내부와 외부를 구분지어 사용가능 여부 구분해놓은 것이 캡슐화의 핵심! =정보(데이터) 보호
	
	멤버변수와 메서드 다 접근제어자 가질 수 있음
	- public, private x -> default 접근 제어를 갖는다 -> "같은 패키지 내에서는" 외부, 내부에서 다 사용 가능
	- 객체 생성 시, private -> 객체 생성한 후, 외부에서 접근 불가, 내부만 가능(예 : obj.value = 80; obj.increment();)
						    같은 클래스 내부 즉, 메서드 내부에선 사용 가능 --> 객체 멤버변수 에 직접 접근 불가하므로 메서드 호출 방법으로만 변경 가능
		
-----------------------------------------------------------------------------------		
