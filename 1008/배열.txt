1. 배열(array) : 
   - 기억장소의 집합
   - 동일한 성격을 가진 기억장소의 연속된 모임
   - 같은 자료형의 변수를 연속적으로 여러개 모아놓은것
   - Java에서 배열명은 참조변수이다. 즉 주소(위치정보)값을 가진다.
   
2. 배열의 선언과 생성
   1) 배열선언
      자료형 배열명[];
      자료형 []배열명;
      자료형[] 배열명;
    
      double arr[];   //배열선언 - 아직 기억장소가 확보되지 않았다.
      
   2) 배열의 생성 - 배열을 정의했다.
   
      arr = new double[4];
                          8byte 8    8   8
                           0     1     2     3   
      arr 0x100 ------->[3.14 ,6.28 , 0.0 ,172.5 ]
                       0x100
      
      배열명은 참조변수이다. 즉, 객체명으로 취급된다.
      배열을 생성하면 배열의 크기가 결정된다. 즉, 배열요소의 갯수가 결정된다.
      배열명.length ==> 배열크기
      arr.length  ==> 4
                           
3. 배열 사용 - 배열요소를 단일변수처럼 사용( 단일변수가 수행하는 모든기능을 배열요소가 동일하게 수행한다)
   1) 배열요소   
      arr[0] = 3.14;
      arr[1] = arr[0] * 2;
      System.out.println(arr[2]); 
      Scanner scanner = new Scanner(System.in);
      arr[3] = scanner.nextDouble();
      arr[arr.length] = 152.9;  //실행시 에러발생- 첨자 범위를 벗어남
      int size = arr.length;
      arr[size-1] = 152.9;      //ok
       
      배열요소는 배열에 저장된 값들을 의미한다.
      배열명[첨자]
            |----> 0~n-1의 정수값(n은 배열의 크기이다)
                   1) 정수 literal value
                   2) 정수 변수
                   3) 정수값을 결과로 가지는 계산식
                   
   2) 배열을 더이상 사용하지 않는다면 null을 대입하여 소멸시킬수 있다.

      (1) 더이상 사용하지 않음    
               arr null ---x---->[3.14 ,6.28 , 0.0 ,172.5 ]
                                0x100
                   
      arr = null;   
      
      이후부터는 arr은 유효한 메모리를 가리키지 않으므로 배열요소값을 접근할 수 없다.
      arr[2] = 100.4;   //에러 발생 - NullPointerException
      
      (2) 새로운 메모리 공간을 할당
               arr 0x200 ---x--->[3.14 ,6.28 , 0.0 ,172.5 ]
                     |          0x100
                     |            [0.0, 0.0, 0.0, 0.0, 0.0]
                     |--------->0x200 
      arr = new double[5];
      
      기존의 배열요소는 접근할 수 없고 새로 할당된 공간을 배열요소로 사용한다. 
            
 4. 다양한 배열 초기화 방법
    점수 5개를 관리하는 배열
    1) 배열선언 및 생성 --- 자동으로 배열요소는 0으로 초기화 된다.
       int score[] = new int[5];
       score[0] = 70;
       score[1] = 90;
       score[2] = 80;
       score[3] = 50;
       score[4] = 60;
       
    2) 배열선언 및 생성과 초기값 지정 -- 원하는 값으로 배열요소를 초기화 한다.
     배열선언시만 초기값을 지정할 수 있다. 
     int score[] = { 70, 90, 80, 50, 60 };   //ok
     
     배열선언후에는 초기값 지정을 한꺼번에 중괄호({})를 이용하여 지정할 수 없다.
     int score[];
     score = { 70, 90, 80, 50, 60 };         //error
         
    3) 배열선언후 new로 배열을 생성하면서  중괄호({})를 이용한 초기값 지정을 할 수 있다.
     int score[];
     score = new int[]{ 70, 90, 80, 50, 60 }; // ok
     주의) 요소갯수를 지정하지 않는다.
 
5. 배열을 인자로 전달하는 메서드 
   1)기본자료형을 메서드의 인자로 전달하면 내용값이 복사되어 전달된다.
      원본 즉, 전달하는 변수의 내용값은 변경되지 않는다.(호출후)
   2)참조형(배열명,객체)를 인자로 전달하면 위치정보가 복사되어 전달된다.
      원본이 변경될 수도 있다(호출후)
        
   public static void main(String[] args) {
	   int number = 86;
	   int score[] = { 70, 90, 80, 50, 60 };
	   
	   //메서드를 호출할때 전달하는 매개변수를 실매개변수(artual argument)라고 한다.
	   //기본자료형값을 전달하면 값이 복사되어 메서드로 전달된다.
	   //참조형값 즉, 배열명을 전달하면 배열명이 가진 위치정보가 복사되어 메서드로 전달된다.
	   print(number);
	   printArray(score);
   }
   
   void print(int n){
      System.out.println(n);
   }
   
   void printArray(int arr[]){
      System.out.println("배열크기 : " + arr.length);
      String result = "[";
      for(int i=0; i<arr.length; i++){
      	if( i != arr.length-1){
      	   result += arr[i] + ",";
      	}else{
      	   result += arr[i];
      	}
      }
      result += "]";
      System.out.println("배열요소값들: " + result);	   
   }  
   
   =================================
   argument  --> 인자 혹은 인수
   parameter --> 매개변수
   
   메서드(실매개변수); //메서드를 호출할때의 용어
               parameter    
        actual argument
   
                                parameter  
                  formal(dummy) argument 
   리턴값정보 메서드명(형식매개변수,...){ //메서드를 선언/정의할때의 용어
      실행코드
      [return 값;]
   } 

6. 배열의 복사
   기존의 배열내용값 즉, 배열요소값들을 다른 배열의 요소값으로 복사하는것
   
   1) 얕은복사(shallow copy) : 위치정보(참조값)을 복사하는것
      int a[] = {10,20,30,40,50};
      int b[];
      
      a 0x100---->[10,20,30,56,50]
      b 0x100----^
      
      b = a;   //얕은복사
      a[3] = 56;
      System.out.println(b[3]); // 56

   2) 깊은복사(deep copy) : 기존배열과 동일한 크기의 배열을 할당하여
      기존배열의 요소값을 그대로 복사하는것
      int a[] = {10,20,30,40,50};
      int b[];
      
      a 0x100---->[10,20,30,56,50]
      b 0x200---->[10,20,30,40,50]

      b = new int[a.length];
      for(int i=0; i <a.length; i++){ //깊은복사
		  b[i] = a[i];      
      } 

      a[3] = 56;
      System.out.println(b[3]); //40
      
      배열의 요소값 복사를 손쉽게 할수 있도록 System클래스에 arraycopy() 메서드가 있다.
      public static void arraycopy​(Object src, //원본 배열명 
                                   int srcPos, //원본 배열의 시작위치
                                   Object dest,//목적지 배열명
                                   int destPos,//목적지 배열의 시작위치
                                   int length) //원본 배열에서 복사할 요소의 갯수
                                    
      int a[] = {10,20,30,40,50};
      int b[]; 
      
      b = new int[5];
      System.arraycopy(a,0,b,0,5)
      
  
참고) 메서드 작성시 메서드명은 같고 인자정보(매개변수정보)를 다르게 작성할 수 있다.
     이러한 방법을 메서드 오버로딩(overloading)이라고 부른다.  
                               
참고) java.lang패키지 이외의 패키지에 속한 클래스를 사용하려면
     반드시 import 시켜야 한다. 

     교재예제에서 자주사용하는
     java.lang패키지의 클래스들
     1) System
     2) String
     3) Integer
     4) Math
     
     java.lang패키지의 클래스는 import구문없이 자유롭게 사용할 수 있다.
     
     
     교재예제에서 자주사용하는
     java.util패키지의 클래스들
     1) Scanner
     2) Arrays
     
     
                                      